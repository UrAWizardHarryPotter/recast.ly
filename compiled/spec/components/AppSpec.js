import App from '../../src/components/App.js';

describe('App', function () {
  var {
    Simulate,
    renderIntoDocument,
    findRenderedDOMComponentWithClass,
    scryRenderedDOMComponentsWithClass
  } = ReactTestUtils;

  var app;

  beforeEach(function () {
    app = renderIntoDocument(React.createElement(App, { searchYouTube: () => {} }));
  });

  it('should be a stateful class component', function () {
    expect(React.Component.isPrototypeOf(App)).to.be.true;
  });

  it('should render a single VideoPlayer component', function () {
    var videoPlayer = findRenderedDOMComponentWithClass(app, 'video-player');
    expect(videoPlayer).to.exist;
  });

  it('should render a single VideoList component', function () {
    var videoList = findRenderedDOMComponentWithClass(app, 'video-list');
    expect(videoList).to.exist;
  });

  it('should update the video player when a video entry\'s title is clicked', function () {
    // This test will only works once `App` is refactored into a stateful class component
    // because `renderIntoDocument` does not work with stateless class components
    expect(React.Component.isPrototypeOf(App)).to.be.true;

    var videoEntryTitleElements = scryRenderedDOMComponentsWithClass(app, 'video-list-entry-title');

    videoEntryTitleElements.forEach(videoEntryTitle => {
      Simulate.click(videoEntryTitle);
      var player = findRenderedDOMComponentWithClass(app, 'video-player');
      var playerTitle = player.querySelector('.video-player-details h3');

      // This test assumes that if you can successfully update the video player's title,
      // you can also update the video and description
      expect(playerTitle.innerHTML).to.equal(videoEntryTitle.innerHTML);
    });
  });

  xdescribe('when rendering live data from YouTube', function () {
    var searchYouTubeStub;

    beforeEach(function () {
      searchYouTubeStub = sinon.stub();
      searchYouTubeStub.yields(window.fakeVideoData);
      app = renderIntoDocument(React.createElement(App, { searchYouTube: searchYouTubeStub }));
    });

    it('should call `searchYouTube` when app is initialized', function () {
      expect(searchYouTubeStub.called).to.be.true;
    });

    it('should load live data when app is initialized', function () {
      expect(searchYouTubeStub.called).to.be.true;

      var videoEntryTitleElements = scryRenderedDOMComponentsWithClass(app, 'video-list-entry-title');

      videoEntryTitleElements.forEach((videoEntryTitle, i) => expect(videoEntryTitle.innerHTML).to.equal(fakeVideoData[i].snippet.title));
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NwZWMvY29tcG9uZW50cy9BcHBTcGVjLmpzeCJdLCJuYW1lcyI6WyJBcHAiLCJkZXNjcmliZSIsIlNpbXVsYXRlIiwicmVuZGVySW50b0RvY3VtZW50IiwiZmluZFJlbmRlcmVkRE9NQ29tcG9uZW50V2l0aENsYXNzIiwic2NyeVJlbmRlcmVkRE9NQ29tcG9uZW50c1dpdGhDbGFzcyIsIlJlYWN0VGVzdFV0aWxzIiwiYXBwIiwiYmVmb3JlRWFjaCIsIml0IiwiZXhwZWN0IiwiUmVhY3QiLCJDb21wb25lbnQiLCJpc1Byb3RvdHlwZU9mIiwidG8iLCJiZSIsInRydWUiLCJ2aWRlb1BsYXllciIsImV4aXN0IiwidmlkZW9MaXN0IiwidmlkZW9FbnRyeVRpdGxlRWxlbWVudHMiLCJmb3JFYWNoIiwidmlkZW9FbnRyeVRpdGxlIiwiY2xpY2siLCJwbGF5ZXIiLCJwbGF5ZXJUaXRsZSIsInF1ZXJ5U2VsZWN0b3IiLCJpbm5lckhUTUwiLCJlcXVhbCIsInhkZXNjcmliZSIsInNlYXJjaFlvdVR1YmVTdHViIiwic2lub24iLCJzdHViIiwieWllbGRzIiwid2luZG93IiwiZmFrZVZpZGVvRGF0YSIsImNhbGxlZCIsImkiLCJzbmlwcGV0IiwidGl0bGUiXSwibWFwcGluZ3MiOiJBQUFBLE9BQU9BLEdBQVAsTUFBZ0IsNkJBQWhCOztBQUVBQyxTQUFTLEtBQVQsRUFBZ0IsWUFBVztBQUN6QixNQUFJO0FBQ0ZDLFlBREU7QUFFRkMsc0JBRkU7QUFHRkMscUNBSEU7QUFJRkM7QUFKRSxNQUtBQyxjQUxKOztBQU9BLE1BQUlDLEdBQUo7O0FBRUFDLGFBQVcsWUFBVztBQUNwQkQsVUFBTUosbUJBQ0osb0JBQUMsR0FBRCxJQUFLLGVBQWUsTUFBTSxDQUFFLENBQTVCLEdBREksQ0FBTjtBQUdELEdBSkQ7O0FBTUFNLEtBQUcsc0NBQUgsRUFBMkMsWUFBVztBQUNwREMsV0FBT0MsTUFBTUMsU0FBTixDQUFnQkMsYUFBaEIsQ0FBOEJiLEdBQTlCLENBQVAsRUFBMkNjLEVBQTNDLENBQThDQyxFQUE5QyxDQUFpREMsSUFBakQ7QUFDRCxHQUZEOztBQUlBUCxLQUFHLDhDQUFILEVBQW1ELFlBQVc7QUFDNUQsUUFBSVEsY0FBY2Isa0NBQWtDRyxHQUFsQyxFQUF1QyxjQUF2QyxDQUFsQjtBQUNBRyxXQUFPTyxXQUFQLEVBQW9CSCxFQUFwQixDQUF1QkksS0FBdkI7QUFDRCxHQUhEOztBQUtBVCxLQUFHLDRDQUFILEVBQWlELFlBQVc7QUFDMUQsUUFBSVUsWUFBWWYsa0NBQWtDRyxHQUFsQyxFQUF1QyxZQUF2QyxDQUFoQjtBQUNBRyxXQUFPUyxTQUFQLEVBQWtCTCxFQUFsQixDQUFxQkksS0FBckI7QUFDRCxHQUhEOztBQUtBVCxLQUFHLHVFQUFILEVBQTRFLFlBQVc7QUFDckY7QUFDQTtBQUNBQyxXQUFPQyxNQUFNQyxTQUFOLENBQWdCQyxhQUFoQixDQUE4QmIsR0FBOUIsQ0FBUCxFQUEyQ2MsRUFBM0MsQ0FBOENDLEVBQTlDLENBQWlEQyxJQUFqRDs7QUFFQSxRQUFJSSwwQkFBMEJmLG1DQUFtQ0UsR0FBbkMsRUFBd0Msd0JBQXhDLENBQTlCOztBQUVBYSw0QkFBd0JDLE9BQXhCLENBQWlDQyxlQUFELElBQXFCO0FBQ25EcEIsZUFBU3FCLEtBQVQsQ0FBZUQsZUFBZjtBQUNBLFVBQUlFLFNBQVNwQixrQ0FBa0NHLEdBQWxDLEVBQXVDLGNBQXZDLENBQWI7QUFDQSxVQUFJa0IsY0FBY0QsT0FBT0UsYUFBUCxDQUFxQiwwQkFBckIsQ0FBbEI7O0FBRUE7QUFDQTtBQUNBaEIsYUFBT2UsWUFBWUUsU0FBbkIsRUFBOEJiLEVBQTlCLENBQWlDYyxLQUFqQyxDQUF1Q04sZ0JBQWdCSyxTQUF2RDtBQUNELEtBUkQ7QUFTRCxHQWhCRDs7QUFrQkFFLFlBQVUsdUNBQVYsRUFBbUQsWUFBVztBQUM1RCxRQUFJQyxpQkFBSjs7QUFFQXRCLGVBQVcsWUFBVztBQUNwQnNCLDBCQUFvQkMsTUFBTUMsSUFBTixFQUFwQjtBQUNBRix3QkFBa0JHLE1BQWxCLENBQXlCQyxPQUFPQyxhQUFoQztBQUNBNUIsWUFBTUosbUJBQ0osb0JBQUMsR0FBRCxJQUFLLGVBQWUyQixpQkFBcEIsR0FESSxDQUFOO0FBR0QsS0FORDs7QUFRQXJCLE9BQUcscURBQUgsRUFBMEQsWUFBVztBQUNuRUMsYUFBT29CLGtCQUFrQk0sTUFBekIsRUFBaUN0QixFQUFqQyxDQUFvQ0MsRUFBcEMsQ0FBdUNDLElBQXZDO0FBQ0QsS0FGRDs7QUFJQVAsT0FBRywrQ0FBSCxFQUFvRCxZQUFXO0FBQzdEQyxhQUFPb0Isa0JBQWtCTSxNQUF6QixFQUFpQ3RCLEVBQWpDLENBQW9DQyxFQUFwQyxDQUF1Q0MsSUFBdkM7O0FBRUEsVUFBSUksMEJBQTBCZixtQ0FBbUNFLEdBQW5DLEVBQXdDLHdCQUF4QyxDQUE5Qjs7QUFFQWEsOEJBQXdCQyxPQUF4QixDQUFnQyxDQUFDQyxlQUFELEVBQWtCZSxDQUFsQixLQUM5QjNCLE9BQU9ZLGdCQUFnQkssU0FBdkIsRUFBa0NiLEVBQWxDLENBQXFDYyxLQUFyQyxDQUEyQ08sY0FBY0UsQ0FBZCxFQUFpQkMsT0FBakIsQ0FBeUJDLEtBQXBFLENBREY7QUFHRCxLQVJEO0FBVUQsR0F6QkQ7QUEwQkQsQ0ExRUQiLCJmaWxlIjoiQXBwU3BlYy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBBcHAgZnJvbSAnLi4vLi4vc3JjL2NvbXBvbmVudHMvQXBwLmpzJztcblxuZGVzY3JpYmUoJ0FwcCcsIGZ1bmN0aW9uKCkge1xuICB2YXIge1xuICAgIFNpbXVsYXRlLFxuICAgIHJlbmRlckludG9Eb2N1bWVudCxcbiAgICBmaW5kUmVuZGVyZWRET01Db21wb25lbnRXaXRoQ2xhc3MsXG4gICAgc2NyeVJlbmRlcmVkRE9NQ29tcG9uZW50c1dpdGhDbGFzc1xuICB9ID0gUmVhY3RUZXN0VXRpbHM7XG5cbiAgdmFyIGFwcDtcblxuICBiZWZvcmVFYWNoKGZ1bmN0aW9uKCkge1xuICAgIGFwcCA9IHJlbmRlckludG9Eb2N1bWVudChcbiAgICAgIDxBcHAgc2VhcmNoWW91VHViZT17KCkgPT4ge319Lz5cbiAgICApO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIGJlIGEgc3RhdGVmdWwgY2xhc3MgY29tcG9uZW50JywgZnVuY3Rpb24oKSB7XG4gICAgZXhwZWN0KFJlYWN0LkNvbXBvbmVudC5pc1Byb3RvdHlwZU9mKEFwcCkpLnRvLmJlLnRydWU7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgcmVuZGVyIGEgc2luZ2xlIFZpZGVvUGxheWVyIGNvbXBvbmVudCcsIGZ1bmN0aW9uKCkge1xuICAgIHZhciB2aWRlb1BsYXllciA9IGZpbmRSZW5kZXJlZERPTUNvbXBvbmVudFdpdGhDbGFzcyhhcHAsICd2aWRlby1wbGF5ZXInKTtcbiAgICBleHBlY3QodmlkZW9QbGF5ZXIpLnRvLmV4aXN0O1xuICB9KTtcblxuICBpdCgnc2hvdWxkIHJlbmRlciBhIHNpbmdsZSBWaWRlb0xpc3QgY29tcG9uZW50JywgZnVuY3Rpb24oKSB7XG4gICAgdmFyIHZpZGVvTGlzdCA9IGZpbmRSZW5kZXJlZERPTUNvbXBvbmVudFdpdGhDbGFzcyhhcHAsICd2aWRlby1saXN0Jyk7XG4gICAgZXhwZWN0KHZpZGVvTGlzdCkudG8uZXhpc3Q7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgdXBkYXRlIHRoZSB2aWRlbyBwbGF5ZXIgd2hlbiBhIHZpZGVvIGVudHJ5XFwncyB0aXRsZSBpcyBjbGlja2VkJywgZnVuY3Rpb24oKSB7XG4gICAgLy8gVGhpcyB0ZXN0IHdpbGwgb25seSB3b3JrcyBvbmNlIGBBcHBgIGlzIHJlZmFjdG9yZWQgaW50byBhIHN0YXRlZnVsIGNsYXNzIGNvbXBvbmVudFxuICAgIC8vIGJlY2F1c2UgYHJlbmRlckludG9Eb2N1bWVudGAgZG9lcyBub3Qgd29yayB3aXRoIHN0YXRlbGVzcyBjbGFzcyBjb21wb25lbnRzXG4gICAgZXhwZWN0KFJlYWN0LkNvbXBvbmVudC5pc1Byb3RvdHlwZU9mKEFwcCkpLnRvLmJlLnRydWU7XG5cbiAgICB2YXIgdmlkZW9FbnRyeVRpdGxlRWxlbWVudHMgPSBzY3J5UmVuZGVyZWRET01Db21wb25lbnRzV2l0aENsYXNzKGFwcCwgJ3ZpZGVvLWxpc3QtZW50cnktdGl0bGUnKTtcblxuICAgIHZpZGVvRW50cnlUaXRsZUVsZW1lbnRzLmZvckVhY2goKHZpZGVvRW50cnlUaXRsZSkgPT4ge1xuICAgICAgU2ltdWxhdGUuY2xpY2sodmlkZW9FbnRyeVRpdGxlKTtcbiAgICAgIHZhciBwbGF5ZXIgPSBmaW5kUmVuZGVyZWRET01Db21wb25lbnRXaXRoQ2xhc3MoYXBwLCAndmlkZW8tcGxheWVyJyk7XG4gICAgICB2YXIgcGxheWVyVGl0bGUgPSBwbGF5ZXIucXVlcnlTZWxlY3RvcignLnZpZGVvLXBsYXllci1kZXRhaWxzIGgzJyk7XG5cbiAgICAgIC8vIFRoaXMgdGVzdCBhc3N1bWVzIHRoYXQgaWYgeW91IGNhbiBzdWNjZXNzZnVsbHkgdXBkYXRlIHRoZSB2aWRlbyBwbGF5ZXIncyB0aXRsZSxcbiAgICAgIC8vIHlvdSBjYW4gYWxzbyB1cGRhdGUgdGhlIHZpZGVvIGFuZCBkZXNjcmlwdGlvblxuICAgICAgZXhwZWN0KHBsYXllclRpdGxlLmlubmVySFRNTCkudG8uZXF1YWwodmlkZW9FbnRyeVRpdGxlLmlubmVySFRNTCk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIHhkZXNjcmliZSgnd2hlbiByZW5kZXJpbmcgbGl2ZSBkYXRhIGZyb20gWW91VHViZScsIGZ1bmN0aW9uKCkge1xuICAgIHZhciBzZWFyY2hZb3VUdWJlU3R1YjtcblxuICAgIGJlZm9yZUVhY2goZnVuY3Rpb24oKSB7XG4gICAgICBzZWFyY2hZb3VUdWJlU3R1YiA9IHNpbm9uLnN0dWIoKTtcbiAgICAgIHNlYXJjaFlvdVR1YmVTdHViLnlpZWxkcyh3aW5kb3cuZmFrZVZpZGVvRGF0YSk7XG4gICAgICBhcHAgPSByZW5kZXJJbnRvRG9jdW1lbnQoXG4gICAgICAgIDxBcHAgc2VhcmNoWW91VHViZT17c2VhcmNoWW91VHViZVN0dWJ9IC8+XG4gICAgICApO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBjYWxsIGBzZWFyY2hZb3VUdWJlYCB3aGVuIGFwcCBpcyBpbml0aWFsaXplZCcsIGZ1bmN0aW9uKCkge1xuICAgICAgZXhwZWN0KHNlYXJjaFlvdVR1YmVTdHViLmNhbGxlZCkudG8uYmUudHJ1ZTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgbG9hZCBsaXZlIGRhdGEgd2hlbiBhcHAgaXMgaW5pdGlhbGl6ZWQnLCBmdW5jdGlvbigpIHtcbiAgICAgIGV4cGVjdChzZWFyY2hZb3VUdWJlU3R1Yi5jYWxsZWQpLnRvLmJlLnRydWU7XG5cbiAgICAgIHZhciB2aWRlb0VudHJ5VGl0bGVFbGVtZW50cyA9IHNjcnlSZW5kZXJlZERPTUNvbXBvbmVudHNXaXRoQ2xhc3MoYXBwLCAndmlkZW8tbGlzdC1lbnRyeS10aXRsZScpO1xuXG4gICAgICB2aWRlb0VudHJ5VGl0bGVFbGVtZW50cy5mb3JFYWNoKCh2aWRlb0VudHJ5VGl0bGUsIGkpID0+XG4gICAgICAgIGV4cGVjdCh2aWRlb0VudHJ5VGl0bGUuaW5uZXJIVE1MKS50by5lcXVhbChmYWtlVmlkZW9EYXRhW2ldLnNuaXBwZXQudGl0bGUpXG4gICAgICApO1xuICAgIH0pO1xuXG4gIH0pO1xufSk7XG4iXX0=