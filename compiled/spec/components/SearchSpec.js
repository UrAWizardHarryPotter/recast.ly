import App from '../../src/components/App.js';

describe('Search', function () {
  var {
    Simulate,
    renderIntoDocument,
    findRenderedDOMComponentWithClass,
    scryRenderedDOMComponentsWithClass
  } = ReactTestUtils;

  var app, searchYouTubeStub;

  xdescribe('when rendering live data from YouTube', function () {
    beforeEach(function () {
      searchYouTubeStub = sinon.stub();
      searchYouTubeStub.onCall(0).yields(window.fakeVideoData);
      searchYouTubeStub.onCall(1).yields(window.moreFakeVideoData);

      app = renderIntoDocument(React.createElement(App, { searchYouTube: searchYouTubeStub }));
    });

    it('should load live data when app is initialized', function () {
      var videoEntryTitleElements = scryRenderedDOMComponentsWithClass(app, 'video-list-entry-title');
      videoEntryTitleElements.forEach((videoEntryTitle, i) => {
        expect(videoEntryTitle.innerHTML).to.equal(fakeVideoData[i].snippet.title);
      });
    });

    it('should update the video list when typing into the input box', function () {
      var videoEntryTitleElements = scryRenderedDOMComponentsWithClass(app, 'video-list-entry-title');
      videoEntryTitleElements.forEach((videoEntryTitle, i) => {
        expect(videoEntryTitle.innerHTML).to.equal(fakeVideoData[i].snippet.title);
      });

      var searchInputElement = findRenderedDOMComponentWithClass(app, 'form-control');
      Simulate.change(searchInputElement, { target: { value: 'React tutorial' } });

      var newVideoEntryTitleElements = scryRenderedDOMComponentsWithClass(app, 'video-list-entry-title');
      newVideoEntryTitleElements.forEach((videoEntryTitle, i) => {
        expect(videoEntryTitle.innerHTML).to.equal(moreFakeVideoData[i].snippet.title);
      });
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NwZWMvY29tcG9uZW50cy9TZWFyY2hTcGVjLmpzeCJdLCJuYW1lcyI6WyJBcHAiLCJkZXNjcmliZSIsIlNpbXVsYXRlIiwicmVuZGVySW50b0RvY3VtZW50IiwiZmluZFJlbmRlcmVkRE9NQ29tcG9uZW50V2l0aENsYXNzIiwic2NyeVJlbmRlcmVkRE9NQ29tcG9uZW50c1dpdGhDbGFzcyIsIlJlYWN0VGVzdFV0aWxzIiwiYXBwIiwic2VhcmNoWW91VHViZVN0dWIiLCJ4ZGVzY3JpYmUiLCJiZWZvcmVFYWNoIiwic2lub24iLCJzdHViIiwib25DYWxsIiwieWllbGRzIiwid2luZG93IiwiZmFrZVZpZGVvRGF0YSIsIm1vcmVGYWtlVmlkZW9EYXRhIiwiaXQiLCJ2aWRlb0VudHJ5VGl0bGVFbGVtZW50cyIsImZvckVhY2giLCJ2aWRlb0VudHJ5VGl0bGUiLCJpIiwiZXhwZWN0IiwiaW5uZXJIVE1MIiwidG8iLCJlcXVhbCIsInNuaXBwZXQiLCJ0aXRsZSIsInNlYXJjaElucHV0RWxlbWVudCIsImNoYW5nZSIsInRhcmdldCIsInZhbHVlIiwibmV3VmlkZW9FbnRyeVRpdGxlRWxlbWVudHMiXSwibWFwcGluZ3MiOiJBQUFBLE9BQU9BLEdBQVAsTUFBZ0IsNkJBQWhCOztBQUVBQyxTQUFVLFFBQVYsRUFBb0IsWUFBVztBQUM3QixNQUFJO0FBQ0ZDLFlBREU7QUFFRkMsc0JBRkU7QUFHRkMscUNBSEU7QUFJRkM7QUFKRSxNQUtBQyxjQUxKOztBQU9BLE1BQUlDLEdBQUosRUFBU0MsaUJBQVQ7O0FBRUFDLFlBQVUsdUNBQVYsRUFBbUQsWUFBVztBQUM1REMsZUFBVyxZQUFXO0FBQ3BCRiwwQkFBb0JHLE1BQU1DLElBQU4sRUFBcEI7QUFDQUosd0JBQWtCSyxNQUFsQixDQUF5QixDQUF6QixFQUE0QkMsTUFBNUIsQ0FBbUNDLE9BQU9DLGFBQTFDO0FBQ0FSLHdCQUFrQkssTUFBbEIsQ0FBeUIsQ0FBekIsRUFBNEJDLE1BQTVCLENBQW1DQyxPQUFPRSxpQkFBMUM7O0FBRUFWLFlBQU1KLG1CQUNKLG9CQUFDLEdBQUQsSUFBSyxlQUFlSyxpQkFBcEIsR0FESSxDQUFOO0FBR0QsS0FSRDs7QUFVQVUsT0FBRywrQ0FBSCxFQUFvRCxZQUFXO0FBQzdELFVBQUlDLDBCQUEwQmQsbUNBQW1DRSxHQUFuQyxFQUF3Qyx3QkFBeEMsQ0FBOUI7QUFDQVksOEJBQXdCQyxPQUF4QixDQUFnQyxDQUFDQyxlQUFELEVBQWtCQyxDQUFsQixLQUF3QjtBQUN0REMsZUFBT0YsZ0JBQWdCRyxTQUF2QixFQUFrQ0MsRUFBbEMsQ0FBcUNDLEtBQXJDLENBQTJDVixjQUFjTSxDQUFkLEVBQWlCSyxPQUFqQixDQUF5QkMsS0FBcEU7QUFDRCxPQUZEO0FBR0QsS0FMRDs7QUFPQVYsT0FBRyw2REFBSCxFQUFrRSxZQUFXO0FBQzNFLFVBQUlDLDBCQUEwQmQsbUNBQW1DRSxHQUFuQyxFQUF3Qyx3QkFBeEMsQ0FBOUI7QUFDQVksOEJBQXdCQyxPQUF4QixDQUFnQyxDQUFDQyxlQUFELEVBQWtCQyxDQUFsQixLQUF3QjtBQUN0REMsZUFBT0YsZ0JBQWdCRyxTQUF2QixFQUFrQ0MsRUFBbEMsQ0FBcUNDLEtBQXJDLENBQTJDVixjQUFjTSxDQUFkLEVBQWlCSyxPQUFqQixDQUF5QkMsS0FBcEU7QUFDRCxPQUZEOztBQUlBLFVBQUlDLHFCQUFxQnpCLGtDQUFrQ0csR0FBbEMsRUFBdUMsY0FBdkMsQ0FBekI7QUFDQUwsZUFBUzRCLE1BQVQsQ0FBZ0JELGtCQUFoQixFQUFvQyxFQUFDRSxRQUFRLEVBQUNDLE9BQU8sZ0JBQVIsRUFBVCxFQUFwQzs7QUFFQSxVQUFJQyw2QkFBNkI1QixtQ0FBbUNFLEdBQW5DLEVBQXdDLHdCQUF4QyxDQUFqQztBQUNBMEIsaUNBQTJCYixPQUEzQixDQUFtQyxDQUFDQyxlQUFELEVBQWtCQyxDQUFsQixLQUF3QjtBQUN6REMsZUFBT0YsZ0JBQWdCRyxTQUF2QixFQUFrQ0MsRUFBbEMsQ0FBcUNDLEtBQXJDLENBQTJDVCxrQkFBa0JLLENBQWxCLEVBQXFCSyxPQUFyQixDQUE2QkMsS0FBeEU7QUFDRCxPQUZEO0FBR0QsS0FiRDtBQWNELEdBaENEO0FBaUNELENBM0NEIiwiZmlsZSI6IlNlYXJjaFNwZWMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQXBwIGZyb20gJy4uLy4uL3NyYy9jb21wb25lbnRzL0FwcC5qcyc7XG5cbmRlc2NyaWJlICgnU2VhcmNoJywgZnVuY3Rpb24oKSB7XG4gIHZhciB7XG4gICAgU2ltdWxhdGUsXG4gICAgcmVuZGVySW50b0RvY3VtZW50LFxuICAgIGZpbmRSZW5kZXJlZERPTUNvbXBvbmVudFdpdGhDbGFzcyxcbiAgICBzY3J5UmVuZGVyZWRET01Db21wb25lbnRzV2l0aENsYXNzXG4gIH0gPSBSZWFjdFRlc3RVdGlscztcblxuICB2YXIgYXBwLCBzZWFyY2hZb3VUdWJlU3R1YjtcblxuICB4ZGVzY3JpYmUoJ3doZW4gcmVuZGVyaW5nIGxpdmUgZGF0YSBmcm9tIFlvdVR1YmUnLCBmdW5jdGlvbigpIHtcbiAgICBiZWZvcmVFYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgc2VhcmNoWW91VHViZVN0dWIgPSBzaW5vbi5zdHViKCk7XG4gICAgICBzZWFyY2hZb3VUdWJlU3R1Yi5vbkNhbGwoMCkueWllbGRzKHdpbmRvdy5mYWtlVmlkZW9EYXRhKTtcbiAgICAgIHNlYXJjaFlvdVR1YmVTdHViLm9uQ2FsbCgxKS55aWVsZHMod2luZG93Lm1vcmVGYWtlVmlkZW9EYXRhKTtcblxuICAgICAgYXBwID0gcmVuZGVySW50b0RvY3VtZW50KFxuICAgICAgICA8QXBwIHNlYXJjaFlvdVR1YmU9e3NlYXJjaFlvdVR1YmVTdHVifSAvPlxuICAgICAgKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgbG9hZCBsaXZlIGRhdGEgd2hlbiBhcHAgaXMgaW5pdGlhbGl6ZWQnLCBmdW5jdGlvbigpIHtcbiAgICAgIHZhciB2aWRlb0VudHJ5VGl0bGVFbGVtZW50cyA9IHNjcnlSZW5kZXJlZERPTUNvbXBvbmVudHNXaXRoQ2xhc3MoYXBwLCAndmlkZW8tbGlzdC1lbnRyeS10aXRsZScpO1xuICAgICAgdmlkZW9FbnRyeVRpdGxlRWxlbWVudHMuZm9yRWFjaCgodmlkZW9FbnRyeVRpdGxlLCBpKSA9PiB7XG4gICAgICAgIGV4cGVjdCh2aWRlb0VudHJ5VGl0bGUuaW5uZXJIVE1MKS50by5lcXVhbChmYWtlVmlkZW9EYXRhW2ldLnNuaXBwZXQudGl0bGUpO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHVwZGF0ZSB0aGUgdmlkZW8gbGlzdCB3aGVuIHR5cGluZyBpbnRvIHRoZSBpbnB1dCBib3gnLCBmdW5jdGlvbigpIHtcbiAgICAgIHZhciB2aWRlb0VudHJ5VGl0bGVFbGVtZW50cyA9IHNjcnlSZW5kZXJlZERPTUNvbXBvbmVudHNXaXRoQ2xhc3MoYXBwLCAndmlkZW8tbGlzdC1lbnRyeS10aXRsZScpO1xuICAgICAgdmlkZW9FbnRyeVRpdGxlRWxlbWVudHMuZm9yRWFjaCgodmlkZW9FbnRyeVRpdGxlLCBpKSA9PiB7XG4gICAgICAgIGV4cGVjdCh2aWRlb0VudHJ5VGl0bGUuaW5uZXJIVE1MKS50by5lcXVhbChmYWtlVmlkZW9EYXRhW2ldLnNuaXBwZXQudGl0bGUpO1xuICAgICAgfSk7XG5cbiAgICAgIHZhciBzZWFyY2hJbnB1dEVsZW1lbnQgPSBmaW5kUmVuZGVyZWRET01Db21wb25lbnRXaXRoQ2xhc3MoYXBwLCAnZm9ybS1jb250cm9sJyk7XG4gICAgICBTaW11bGF0ZS5jaGFuZ2Uoc2VhcmNoSW5wdXRFbGVtZW50LCB7dGFyZ2V0OiB7dmFsdWU6ICdSZWFjdCB0dXRvcmlhbCd9fSk7XG5cbiAgICAgIHZhciBuZXdWaWRlb0VudHJ5VGl0bGVFbGVtZW50cyA9IHNjcnlSZW5kZXJlZERPTUNvbXBvbmVudHNXaXRoQ2xhc3MoYXBwLCAndmlkZW8tbGlzdC1lbnRyeS10aXRsZScpO1xuICAgICAgbmV3VmlkZW9FbnRyeVRpdGxlRWxlbWVudHMuZm9yRWFjaCgodmlkZW9FbnRyeVRpdGxlLCBpKSA9PiB7XG4gICAgICAgIGV4cGVjdCh2aWRlb0VudHJ5VGl0bGUuaW5uZXJIVE1MKS50by5lcXVhbChtb3JlRmFrZVZpZGVvRGF0YVtpXS5zbmlwcGV0LnRpdGxlKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9KTtcbn0pO1xuIl19